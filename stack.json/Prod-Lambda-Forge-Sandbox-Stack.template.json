{
 "Resources": {
  "PipelineArtifactsBucketAEA9A052": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/ArtifactsBucket/Resource"
   }
  },
  "PipelineArtifactsBucketPolicyF53CCC52": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "PipelineArtifactsBucketAEA9A052"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/ArtifactsBucket/Policy/Resource"
   }
  },
  "PipelineRoleB27FAA37": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codepipeline.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Role/Resource"
   }
  },
  "PipelineRoleDefaultPolicy7BDC1ABB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineRoleDefaultPolicy7BDC1ABB",
    "Roles": [
     {
      "Ref": "PipelineRoleB27FAA37"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Role/DefaultPolicy/Resource"
   }
  },
  "Pipeline9850B417": {
   "Type": "AWS::CodePipeline::Pipeline",
   "Properties": {
    "RoleArn": {
     "Fn::GetAtt": [
      "PipelineRoleB27FAA37",
      "Arn"
     ]
    },
    "Stages": [
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Source",
         "Owner": "ThirdParty",
         "Provider": "GitHub",
         "Version": "1"
        },
        "Configuration": {
         "Owner": "GuiPimenta-Dev",
         "Repo": "sandbox",
         "Branch": "main",
         "OAuthToken": "{{resolve:secretsmanager:github-token:SecretString:::}}",
         "PollForSourceChanges": false
        },
        "Name": "GuiPimenta-Dev_sandbox",
        "OutputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "RunOrder": 1
       }
      ],
      "Name": "Source"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineBuildSynthCdkBuildProject6BEFA8E6"
         },
         "EnvironmentVariables": "[{\"name\":\"_PROJECT_CONFIG_HASH\",\"type\":\"PLAINTEXT\",\"value\":\"16ef9c28e8a8f578726e3649389bb22f2acc03493d710c4916a7374318267763\"}]"
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Synth",
        "OutputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       }
      ],
      "Name": "Build"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineUpdatePipelineSelfMutationDAA41400"
         },
         "EnvironmentVariables": "[{\"name\":\"_PROJECT_CONFIG_HASH\",\"type\":\"PLAINTEXT\",\"value\":\"999f4264514e4d4e8ed4a83d7b949cb3640cc6631d6e1b8f48723a9a42a273cc\"}]"
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "SelfMutate",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       }
      ],
      "Name": "UpdatePipeline"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineAssetsFileAsset185A67CB4"
         }
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "FileAsset1",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineAssetsFileAsset24D2D639B"
         }
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "FileAsset2",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineAssetsFileAsset3FE71B523"
         }
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "FileAsset3",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineAssetsFileAsset474303B7D"
         }
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "FileAsset4",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       }
      ],
      "Name": "Assets"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineStagingCoverage7A6CE768"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Coverage",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineStagingUnitTestUnitTest0835F1C1"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Unit_Test",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineStagingValidateDocsValidateDocsCA1FA06B"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Validate_Docs",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Validate_Integration_Tests",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Deploy",
         "Owner": "AWS",
         "Provider": "CloudFormation",
         "Version": "1"
        },
        "Configuration": {
         "StackName": "Staging-Lambda-Forge-Sandbox-Lambda-Stack",
         "Capabilities": "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND",
         "RoleArn": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":iam::",
            {
             "Ref": "AWS::AccountId"
            },
            ":role/cdk-hnb659fds-cfn-exec-role-",
            {
             "Ref": "AWS::AccountId"
            },
            "-",
            {
             "Ref": "AWS::Region"
            }
           ]
          ]
         },
         "ActionMode": "CHANGE_SET_REPLACE",
         "ChangeSetName": "PipelineChange",
         "TemplatePath": "Synth_Output::assembly-Prod-Lambda-Forge-Sandbox-Stack-Staging/ProdLambdaForgeSandboxStackStagingLambdaForgeSandboxLambdaStack7E3F3588.template.json"
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "Lambda-Forge-Sandbox-Lambda-Stack.Prepare",
        "RoleArn": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        },
        "RunOrder": 2
       },
       {
        "ActionTypeId": {
         "Category": "Deploy",
         "Owner": "AWS",
         "Provider": "CloudFormation",
         "Version": "1"
        },
        "Configuration": {
         "StackName": "Staging-Lambda-Forge-Sandbox-Lambda-Stack",
         "ActionMode": "CHANGE_SET_EXECUTE",
         "ChangeSetName": "PipelineChange"
        },
        "Name": "Lambda-Forge-Sandbox-Lambda-Stack.Deploy",
        "RoleArn": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        },
        "RunOrder": 3
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineStagingIntegrationTestIntegrationTestFCF06875"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Integration_Test",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 4
       }
      ],
      "Name": "Staging"
     },
     {
      "Actions": [
       {
        "ActionTypeId": {
         "Category": "Deploy",
         "Owner": "AWS",
         "Provider": "CloudFormation",
         "Version": "1"
        },
        "Configuration": {
         "StackName": "Prod-Lambda-Forge-Sandbox-Lambda-Stack",
         "Capabilities": "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND",
         "RoleArn": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":iam::",
            {
             "Ref": "AWS::AccountId"
            },
            ":role/cdk-hnb659fds-cfn-exec-role-",
            {
             "Ref": "AWS::AccountId"
            },
            "-",
            {
             "Ref": "AWS::Region"
            }
           ]
          ]
         },
         "ActionMode": "CHANGE_SET_REPLACE",
         "ChangeSetName": "PipelineChange",
         "TemplatePath": "Synth_Output::assembly-Prod-Lambda-Forge-Sandbox-Stack-Prod/ProdLambdaForgeSandboxStackProdLambdaForgeSandboxLambdaStack7EA9C689.template.json"
        },
        "InputArtifacts": [
         {
          "Name": "Synth_Output"
         }
        ],
        "Name": "Lambda-Forge-Sandbox-Lambda-Stack.Prepare",
        "RoleArn": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        },
        "RunOrder": 1
       },
       {
        "ActionTypeId": {
         "Category": "Deploy",
         "Owner": "AWS",
         "Provider": "CloudFormation",
         "Version": "1"
        },
        "Configuration": {
         "StackName": "Prod-Lambda-Forge-Sandbox-Lambda-Stack",
         "ActionMode": "CHANGE_SET_EXECUTE",
         "ChangeSetName": "PipelineChange"
        },
        "Name": "Lambda-Forge-Sandbox-Lambda-Stack.Deploy",
        "RoleArn": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        },
        "RunOrder": 2
       },
       {
        "ActionTypeId": {
         "Category": "Build",
         "Owner": "AWS",
         "Provider": "CodeBuild",
         "Version": "1"
        },
        "Configuration": {
         "ProjectName": {
          "Ref": "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076"
         }
        },
        "InputArtifacts": [
         {
          "Name": "GuiPimenta_Dev_sandbox_Source"
         }
        ],
        "Name": "Generate_Staging_Docs",
        "RoleArn": {
         "Fn::GetAtt": [
          "PipelineCodeBuildActionRole226DB0CB",
          "Arn"
         ]
        },
        "RunOrder": 3
       }
      ],
      "Name": "Prod"
     }
    ],
    "ArtifactStore": {
     "Location": {
      "Ref": "PipelineArtifactsBucketAEA9A052"
     },
     "Type": "S3"
    },
    "Name": "Prod-Lambda-Forge-Sandbox-Pipeline",
    "RestartExecutionOnUpdate": true
   },
   "DependsOn": [
    "PipelineRoleDefaultPolicy7BDC1ABB",
    "PipelineRoleB27FAA37"
   ],
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Resource"
   }
  },
  "PipelineSourceGuiPimentaDevsandboxWebhookResourceA70628F4": {
   "Type": "AWS::CodePipeline::Webhook",
   "Properties": {
    "Authentication": "GITHUB_HMAC",
    "AuthenticationConfiguration": {
     "SecretToken": "{{resolve:secretsmanager:github-token:SecretString:::}}"
    },
    "Filters": [
     {
      "JsonPath": "$.ref",
      "MatchEquals": "refs/heads/{Branch}"
     }
    ],
    "TargetAction": "GuiPimenta-Dev_sandbox",
    "TargetPipeline": {
     "Ref": "Pipeline9850B417"
    },
    "TargetPipelineVersion": 1,
    "RegisterWithThirdParty": true
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Source/GuiPimenta-Dev_sandbox/WebhookResource"
   }
  },
  "PipelineBuildSynthCdkBuildProjectRole231EEA2A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Build/Synth/CdkBuildProject/Role/Resource"
   }
  },
  "PipelineBuildSynthCdkBuildProjectRoleDefaultPolicyFB6C941C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineBuildSynthCdkBuildProject6BEFA8E6"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineBuildSynthCdkBuildProject6BEFA8E6"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "PipelineBuildSynthCdkBuildProject6BEFA8E6"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineBuildSynthCdkBuildProjectRoleDefaultPolicyFB6C941C",
    "Roles": [
     {
      "Ref": "PipelineBuildSynthCdkBuildProjectRole231EEA2A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Build/Synth/CdkBuildProject/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineBuildSynthCdkBuildProject6BEFA8E6": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineBuildSynthCdkBuildProjectRole231EEA2A",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"pip install aws-cdk-lib\",\n        \"npm install -g aws-cdk\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk synth\"\n      ]\n    }\n  },\n  \"artifacts\": {\n    \"base-directory\": \"cdk.out\",\n    \"files\": \"**/*\"\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Build/Synth",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Build/Synth/CdkBuildProject/Resource"
   }
  },
  "PipelineStagingCoverageRole4F4353A1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Coverage/Coverage/Role/Resource"
   }
  },
  "PipelineStagingCoverageRoleDefaultPolicy48C49F80": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingCoverage7A6CE768"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingCoverage7A6CE768"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "CoverageGroupF67CAF66",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":codebuild:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":report-group/",
           {
            "Ref": "PipelineStagingCoverage7A6CE768"
           },
           "-*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineStagingCoverageRoleDefaultPolicy48C49F80",
    "Roles": [
     {
      "Ref": "PipelineStagingCoverageRole4F4353A1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Coverage/Coverage/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineStagingCoverage7A6CE768": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineStagingCoverageRole4F4353A1",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"cache\": {\n    \"paths\": [\n      \"/root/.cache/pip/**/*\"\n    ]\n  },\n  \"reports\": {\n    \"",
        {
         "Fn::GetAtt": [
          "CoverageGroupF67CAF66",
          "Arn"
         ]
        },
        "\": {\n      \"files\": [\n        \"coverage.xml\"\n      ],\n      \"base-directory\": \".\",\n      \"file-format\": \"COBERTURAXML\"\n    }\n  },\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"coverage run -m pytest -k \\\"unit.py\\\"\",\n        \"coverage xml --fail-under=80\",\n        \"touch coverage.xml\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Staging/Coverage",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Coverage/Coverage/Resource"
   }
  },
  "PipelineStagingUnitTestUnitTestRole936D92A7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Unit_Test/Unit Test/Role/Resource"
   }
  },
  "PipelineStagingUnitTestUnitTestRoleDefaultPolicyF7F8C341": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingUnitTestUnitTest0835F1C1"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingUnitTestUnitTest0835F1C1"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "UnitReportGroup2CFDB8FD",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":codebuild:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":report-group/",
           {
            "Ref": "PipelineStagingUnitTestUnitTest0835F1C1"
           },
           "-*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineStagingUnitTestUnitTestRoleDefaultPolicyF7F8C341",
    "Roles": [
     {
      "Ref": "PipelineStagingUnitTestUnitTestRole936D92A7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Unit_Test/Unit Test/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineStagingUnitTestUnitTest0835F1C1": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineStagingUnitTestUnitTestRole936D92A7",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"reports\": {\n    \"",
        {
         "Fn::GetAtt": [
          "UnitReportGroup2CFDB8FD",
          "Arn"
         ]
        },
        "\": {\n      \"files\": [\n        \"test-results.xml\"\n      ],\n      \"base-directory\": \"pytest-report\",\n      \"file-format\": \"JUNITXML\"\n    }\n  },\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"pytest --junitxml=pytest-report/test-results.xml -k \\\"unit.py\\\"\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Staging/Unit_Test",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Unit_Test/Unit Test/Resource"
   }
  },
  "PipelineStagingValidateDocsValidateDocsRole8F3A4827": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Docs/Validate Docs/Role/Resource"
   }
  },
  "PipelineStagingValidateDocsValidateDocsRoleDefaultPolicyACAEF7ED": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingValidateDocsValidateDocsCA1FA06B"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingValidateDocsValidateDocsCA1FA06B"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "PipelineStagingValidateDocsValidateDocsCA1FA06B"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineStagingValidateDocsValidateDocsRoleDefaultPolicyACAEF7ED",
    "Roles": [
     {
      "Ref": "PipelineStagingValidateDocsValidateDocsRole8F3A4827"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Docs/Validate Docs/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineStagingValidateDocsValidateDocsCA1FA06B": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "EnvironmentVariables": [
      {
       "Name": "TRACK",
       "Type": "PLAINTEXT",
       "Value": "true"
      }
     ],
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineStagingValidateDocsValidateDocsRole8F3A4827",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g aws-cdk\",\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk synth\",\n        \"rm -rf cdk.out\",\n        \"echo 'import dataclasses\\nimport importlib\\nimport json\\nimport re\\n\\n\\ndef extract_path_parameters(endpoint):\\n    return re.findall(r\\\"\\\\{(.*?)\\\\}\\\", endpoint)\\n\\n\\ndef default_module_loader(path):\\n    return importlib.import_module(transform_file_path(f\\\"{path}/main.lambda_handler\\\"))\\n\\n\\ndef transform_file_path(path):\\n    if path.startswith(\\\"./\\\"):\\n        path = path[2:]\\n\\n    # Replace '/' with '.' and remove the last part if it contains '.'\\n    parts = path.split(\\\"/\\\")\\n    if \\\".\\\" in parts[-1]:\\n        parts[-1] = parts[-1].split(\\\".\\\")[0]\\n\\n    return \\\".\\\".join(parts)\\n\\n\\ndef validate_dataclass(path, attribute_name, attribute):\\n    if not dataclasses.is_dataclass(attribute):\\n        raise Exception(f\\\"{attribute_name} is not a dataclass on {transform_file_path(path)}.main\\\")\\n\\n\\ndef validate_paths(endpoint, function_file):\\n    if \\\"{\\\" not in endpoint[\\\"endpoint\\\"] and \\\"}\\\" not in endpoint[\\\"endpoint\\\"]:\\n        return\\n    path = getattr(function_file, \\\"Path\\\", None)\\n    if path is None:\\n        raise Exception(f\\\"Path is missing on {transform_file_path(endpoint['path'])}.main\\\")\\n\\n    validate_dataclass(endpoint[\\\"path\\\"], \\\"Path\\\", path)\\n\\n    path_parameters = extract_path_parameters(endpoint[\\\"endpoint\\\"])\\n    typed_args = list(path.__dataclass_fields__.keys())\\n    for parameter in path_parameters:\\n        if parameter not in typed_args:\\n            raise Exception(\\n                f\\\"Path parameter {parameter} is missing in Path on {transform_file_path(endpoint['path'])}.main\\\"\\n            )\\n\\n\\ndef validate_docs(endpoints, loader=default_module_loader):\\n    for endpoint in endpoints:\\n        function_file = loader(endpoint[\\\"path\\\"])\\n\\n        validate_paths(endpoint, function_file)\\n\\n        for attr_name in [\\\"Input\\\", \\\"Output\\\"]:\\n            attribute = getattr(function_file, attr_name, None)\\n            if attribute is None:\\n                raise Exception(f\\\"{attr_name} is missing on {transform_file_path(endpoint['path'])}.main\\\")\\n            validate_dataclass(endpoint[\\\"path\\\"], attr_name, attribute)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    with open(\\\"cdk.json\\\", \\\"r\\\") as json_file:\\n        context = json.load(json_file)[\\\"context\\\"]\\n        functions = context[\\\"functions\\\"]\\n    endpoints = [endpoint for endpoint in functions if \\\"method\\\" in endpoint]\\n    validate_docs(endpoints)\\n' > validate_docs.py\",\n        \"python validate_docs.py\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Staging/Validate_Docs",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Docs/Validate Docs/Resource"
   }
  },
  "PipelineStagingValidateIntegrationTestsValidateIntegrationTestsRole753814A0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Integration_Tests/Validate Integration Tests/Role/Resource"
   }
  },
  "PipelineStagingValidateIntegrationTestsValidateIntegrationTestsRoleDefaultPolicy047873CD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineStagingValidateIntegrationTestsValidateIntegrationTestsRoleDefaultPolicy047873CD",
    "Roles": [
     {
      "Ref": "PipelineStagingValidateIntegrationTestsValidateIntegrationTestsRole753814A0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Integration_Tests/Validate Integration Tests/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "EnvironmentVariables": [
      {
       "Name": "TRACK",
       "Type": "PLAINTEXT",
       "Value": "true"
      }
     ],
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineStagingValidateIntegrationTestsValidateIntegrationTestsRole753814A0",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"cache\": {\n    \"paths\": [\n      \"/root/.cache/pip/**/*\"\n    ]\n  },\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g aws-cdk\",\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk synth\",\n        \"rm -rf cdk.out\",\n        \"echo 'import json \\ndef pytest_generate_tests(metafunc):\\n    for mark in metafunc.definition.iter_markers(name=\\\"integration\\\"):\\n        with open(\\\"tested_endpoints.txt\\\", \\\"a\\\") as f:\\n            f.write(f\\\"{json.dumps(mark.kwargs)}|\\\")' > conftest.py\",\n        \"echo 'import json\\nimport os\\n\\n\\ndef validate_tests(endpoints, tested_endpoints):\\n    for endpoint in endpoints:\\n        new_endpoint = {\\\"endpoint\\\": endpoint[\\\"endpoint\\\"], \\\"method\\\": endpoint[\\\"method\\\"]}\\n        if new_endpoint not in tested_endpoints:\\n            raise Exception(\\n                \\\"Endpoint \\\"\\n                + endpoint[\\\"endpoint\\\"]\\n                + \\\" with method \\\"\\n                + endpoint[\\\"method\\\"]\\n                + \\\" should have at least 1 integration test.\\\"\\n            )\\n\\n\\nif __name__ == \\\"__main__\\\":\\n\\n    tested_endpoints = []\\n    if os.path.exists(\\\"tested_endpoints.txt\\\"):\\n        with open(\\\"tested_endpoints.txt\\\", \\\"r\\\") as jl:\\n            json_list = jl.read().split(\\\"|\\\")[:-1]\\n            tested_endpoints = [json.loads(json_str) for json_str in json_list]\\n\\n    with open(\\\"cdk.json\\\", \\\"r\\\") as json_file:\\n        context = json.load(json_file)[\\\"context\\\"]\\n        functions = context[\\\"functions\\\"]\\n\\n    endpoints = [endpoint for endpoint in functions if \\\"method\\\" in endpoint]\\n    validate_tests(endpoints, tested_endpoints)\\n' > validate_integration_tests.py\",\n        \"pytest -m integration --collect-only . -q\",\n        \"python validate_integration_tests.py\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Staging/Validate_Integration_Tests",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Validate_Integration_Tests/Validate Integration Tests/Resource"
   }
  },
  "PipelineStagingIntegrationTestIntegrationTestRole1188FAE6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Integration_Test/Integration Test/Role/Resource"
   }
  },
  "PipelineStagingIntegrationTestIntegrationTestRoleDefaultPolicy59AD9A3A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingIntegrationTestIntegrationTestFCF06875"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineStagingIntegrationTestIntegrationTestFCF06875"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "IntegrationReportGroup5D6F951E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":codebuild:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":report-group/",
           {
            "Ref": "PipelineStagingIntegrationTestIntegrationTestFCF06875"
           },
           "-*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineStagingIntegrationTestIntegrationTestRoleDefaultPolicy59AD9A3A",
    "Roles": [
     {
      "Ref": "PipelineStagingIntegrationTestIntegrationTestRole1188FAE6"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Integration_Test/Integration Test/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineStagingIntegrationTestIntegrationTestFCF06875": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineStagingIntegrationTestIntegrationTestRole1188FAE6",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"reports\": {\n    \"",
        {
         "Fn::GetAtt": [
          "IntegrationReportGroup5D6F951E",
          "Arn"
         ]
        },
        "\": {\n      \"files\": [\n        \"test-results.xml\"\n      ],\n      \"base-directory\": \"pytest-report\",\n      \"file-format\": \"JUNITXML\"\n    }\n  },\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"pytest --junitxml=pytest-report/test-results.xml -k \\\"integration.py\\\"\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Staging/Integration_Test",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Staging/Integration_Test/Integration Test/Resource"
   }
  },
  "PipelineProdGenerateStagingDocsGenerateStagingDocsRole907FC93D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Prod/Generate_Staging_Docs/Generate Staging Docs/Role/Resource"
   }
  },
  "PipelineProdGenerateStagingDocsGenerateStagingDocsRoleDefaultPolicy9D368D2F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:PutObject",
        "s3:PutObjectAcl"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineProdGenerateStagingDocsGenerateStagingDocsRoleDefaultPolicy9D368D2F",
    "Roles": [
     {
      "Ref": "PipelineProdGenerateStagingDocsGenerateStagingDocsRole907FC93D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Prod/Generate_Staging_Docs/Generate Staging Docs/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "EnvironmentVariables": [
      {
       "Name": "TRACK",
       "Type": "PLAINTEXT",
       "Value": "true"
      }
     ],
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineProdGenerateStagingDocsGenerateStagingDocsRole907FC93D",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g aws-cdk\",\n        \"pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\",\n        \"forge layer --install\",\n        \"pip install -r requirements.txt\",\n        \"npm install -g redoc-cli\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk synth\",\n        \"rm -rf cdk.out\",\n        \"echo 'import importlib\\nimport json\\nfrom copy import deepcopy\\nimport yaml\\n\\n\\ndef get_paths(endpoints):\\n    paths = {endpoint[\\\"endpoint\\\"]: {} for endpoint in endpoints}\\n    for endpoint in endpoints:\\n        method = endpoint[\\\"method\\\"].lower()\\n        tag = endpoint[\\\"endpoint\\\"].split(\\\"/\\\")[1].capitalize()\\n        repo_name = endpoint[\\\"name\\\"]\\n        summary = endpoint[\\\"description\\\"]\\n        endpoint = endpoint[\\\"endpoint\\\"]\\n        paths[endpoint][method] = {\\n            \\\"tags\\\": [tag],\\n            \\\"summary\\\": summary,\\n            \\\"operationId\\\": repo_name,\\n        }\\n    return paths\\n\\n\\ndef normalize_file_path(file_path):\\n    \\\"\\\"\\\"\\n    Converts the file path from the endpoint format to the loader format.\\n    \\\"\\\"\\\"\\n    # Strip leading './' if it exists\\n    if file_path.startswith(\\\"./\\\"):\\n        file_path = file_path[2:]\\n\\n    # Replace '/' with '.' and remove the last part if it contains '.'\\n    parts = file_path.split(\\\"/\\\")\\n    if \\\".\\\" in parts[-1]:\\n        parts[-1] = parts[-1].split(\\\".\\\")[0]\\n\\n    return \\\".\\\".join(parts)\\n\\n\\ndef get_schemas_from_endpoint(endpoint, loader):\\n    \\\"\\\"\\\"\\n    Generates schema definitions for a given endpoint.\\n    \\\"\\\"\\\"\\n    repo_name = endpoint[\\\"name\\\"]\\n    file_path = normalize_file_path(endpoint[\\\"path\\\"])\\n    function_module = loader(file_path)\\n\\n    schemas = [\\n        {\\\"data\\\": function_module.Input, \\\"name\\\": f\\\"{repo_name}Input\\\"},\\n        {\\\"data\\\": function_module.Output, \\\"name\\\": f\\\"{repo_name}Output\\\"},\\n    ]\\n\\n    # If endpoint has a dynamic path, add the Path schema.\\n    if \\\"{\\\" in endpoint[\\\"endpoint\\\"] and \\\"}\\\" in endpoint[\\\"endpoint\\\"]:\\n        schemas.append({\\\"data\\\": function_module.Path, \\\"name\\\": f\\\"{repo_name}Path\\\"})\\n\\n    return schemas\\n\\n\\ndef get_schema(endpoints, loader):\\n    \\\"\\\"\\\"\\n    Generates a list of schema definitions for a collection of endpoints.\\n    \\\"\\\"\\\"\\n    all_schemas = []\\n    for endpoint in endpoints:\\n        endpoint_schemas = get_schemas_from_endpoint(endpoint, loader)\\n        all_schemas.extend(endpoint_schemas)\\n\\n    return all_schemas\\n\\n\\ndef parse_schema(data):\\n    \\\"\\\"\\\"\\n    Parses a list of data representing schemas and converts them into a structured dictionary.\\n\\n    Each item in the input data is expected to have 'data' (the class definition)\\n    and 'name' (the schema name) as keys.\\n    \\\"\\\"\\\"\\n    schemas = {}\\n    for item in data:\\n        # Extract class and name from the current item.\\n        dtclass = item[\\\"data\\\"]\\n        schema_name = item[\\\"name\\\"]\\n\\n        # Parse the class to get its properties and required fields.\\n        properties, required_fields = parse_dtclass(dtclass)\\n\\n        # Always include properties; conditionally include required fields if present.\\n        schema_info = {\\\"properties\\\": properties}\\n        if required_fields:\\n            schema_info[\\\"required\\\"] = required_fields\\n\\n        schemas[schema_name] = schema_info\\n\\n    return schemas\\n\\n\\ndef parse_dtclass(dtclass):\\n    schemas = {}\\n    required = []\\n    for i, j in dtclass.__dataclass_fields__.items():\\n        type_ = str(j.type)\\n        swagger_type = None\\n        items = None\\n        properties = None\\n        enum = None\\n        if \\\"List\\\" in type_:\\n            swagger_type = \\\"array\\\"\\n            if \\\"str\\\" in type_:\\n                items = {\\\"type\\\": \\\"string\\\"}\\n            elif \\\"int\\\" in type_:\\n                items = {\\\"type\\\": \\\"integer\\\"}\\n            elif \\\"float\\\" in type_:\\n                items = {\\\"type\\\": \\\"number\\\"}\\n            elif \\\"functions\\\" in type_:\\n                properties, required_props = parse_dtclass(j.type.__args__[0])\\n                items = {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"properties\\\": properties,\\n                    \\\"required\\\": required_props,\\n                }\\n        elif \\\"functions\\\" in type_:\\n            swagger_type = \\\"object\\\"\\n            if \\\"Optional\\\" in type_:\\n                properties, required_props = parse_dtclass(j.type.__args__[0])\\n            else:\\n                properties, required_props = parse_dtclass(j.type)\\n        elif \\\"Dict\\\" in type_:\\n            swagger_type = \\\"object\\\"\\n        elif \\\"str\\\" in type_:\\n            swagger_type = \\\"string\\\"\\n        elif \\\"int\\\" in type_:\\n            swagger_type = \\\"integer\\\"\\n        elif \\\"float\\\" in type_:\\n            swagger_type = \\\"number\\\"\\n        elif \\\"bool\\\" in type_:\\n            swagger_type = \\\"boolean\\\"\\n\\n        if \\\"Optional\\\" not in type_:\\n            required.append(i)\\n\\n        if \\\"Literal\\\" in type_:\\n            data = j.type.__args__[0].__args__ if \\\"Optional\\\" in type_ else j.type.__args__\\n            enum = list(data)\\n            if isinstance(data[0], str):\\n                swagger_type = \\\"string\\\"\\n            elif isinstance(data[0], int):\\n                swagger_type = \\\"integer\\\"\\n\\n        if items:\\n            schemas[i] = {\\\"type\\\": swagger_type, \\\"items\\\": items}\\n        elif properties:\\n            schemas[i] = (\\n                {\\n                    \\\"type\\\": swagger_type,\\n                    \\\"properties\\\": properties,\\n                    \\\"required\\\": required_props,\\n                }\\n                if required_props\\n                else {\\n                    \\\"type\\\": swagger_type,\\n                    \\\"properties\\\": properties,\\n                }\\n            )\\n        else:\\n            schemas[i] = {\\\"type\\\": swagger_type}\\n\\n        if enum:\\n            schemas[i][\\\"enum\\\"] = enum\\n\\n    return schemas, required\\n\\n\\ndef create_response_object(operation_id):\\n    \\\"\\\"\\\"Creates a standardized response object for an operation.\\\"\\\"\\\"\\n    return {\\n        \\\"200\\\": {\\n            \\\"description\\\": \\\"Successful response\\\",\\n            \\\"content\\\": {\\\"application/json\\\": {\\\"schema\\\": {\\\"$ref\\\": f\\\"#/components/schemas/{operation_id}Output\\\"}}},\\n        }\\n    }\\n\\n\\ndef update_parameters_for_get_method(paths, endpoint, method, schemas, data, path_params):\\n    \\\"\\\"\\\"Updates the parameters for GET requests.\\\"\\\"\\\"\\n    operation_id = data[\\\"operationId\\\"]\\n    input_name = f\\\"{operation_id}Input\\\"\\n    path_list = parse_path_properties(path_params) if path_params else []\\n    parameters = parse_get_properties(schemas[input_name])\\n    paths[endpoint][method][\\\"parameters\\\"] = path_list + parameters\\n\\n\\ndef update_request_body_for_other_methods(paths, endpoint, method, data, path_params):\\n    \\\"\\\"\\\"Updates the request body and parameters for non-GET requests.\\\"\\\"\\\"\\n    operation_id = data[\\\"operationId\\\"]\\n    input_name = f\\\"{operation_id}Input\\\"\\n    paths[endpoint][method][\\\"requestBody\\\"] = parse_post_properties(input_name)\\n    if path_params:\\n        path_list = parse_path_properties(path_params)\\n        paths[endpoint][method][\\\"parameters\\\"] = path_list\\n\\n\\ndef parse_path(paths, schemas):\\n    \\\"\\\"\\\"Parses and updates paths with appropriate parameters and responses.\\\"\\\"\\\"\\n    for endpoint, path in paths.items():\\n        for method, data in path.items():\\n            operation_id = data[\\\"operationId\\\"]\\n            path_params = schemas.get(f\\\"{operation_id}Path\\\")\\n\\n            if method == \\\"get\\\":\\n                update_parameters_for_get_method(paths, endpoint, method, schemas, data, path_params)\\n            else:\\n                update_request_body_for_other_methods(paths, endpoint, method, data, path_params)\\n\\n            paths[endpoint][method][\\\"responses\\\"] = create_response_object(operation_id)\\n\\n    return paths\\n\\n\\ndef build_parameter_schema(property_schema):\\n    \\\"\\\"\\\"Builds the schema for a parameter based on its definition in the property schema.\\\"\\\"\\\"\\n    schema_type = {\\\"type\\\": property_schema[\\\"type\\\"]}\\n    if \\\"enum\\\" in property_schema:\\n        schema_type[\\\"enum\\\"] = property_schema[\\\"enum\\\"]\\n    if \\\"items\\\" in property_schema:\\n        schema_type[\\\"items\\\"] = deepcopy(property_schema[\\\"items\\\"])\\n    return schema_type\\n\\n\\ndef create_parameter(name, schema, required):\\n    \\\"\\\"\\\"Creates a parameter dictionary for a single property.\\\"\\\"\\\"\\n    return {\\n        \\\"name\\\": name,\\n        \\\"in\\\": \\\"query\\\",\\n        \\\"required\\\": required,\\n        \\\"schema\\\": build_parameter_schema(schema),\\n    }\\n\\n\\ndef parse_get_properties(schema):\\n    \\\"\\\"\\\"Parses properties from a schema and builds query parameters for a GET request.\\\"\\\"\\\"\\n    parameters = []\\n    properties = schema.get(\\\"properties\\\", {})\\n    required_properties = schema.get(\\\"required\\\", [])\\n\\n    for _property, property_schema in properties.items():\\n        parameter = create_parameter(\\n            name=_property,\\n            schema=property_schema,\\n            required=_property in required_properties,\\n        )\\n        parameters.append(parameter)\\n\\n    return parameters\\n\\n\\ndef parse_post_properties(schema_name):\\n    return {\\n        \\\"content\\\": {\\\"application/json\\\": {\\\"schema\\\": {\\\"$ref\\\": f\\\"#/components/schemas/{schema_name}\\\"}}},\\n    }\\n\\n\\ndef parse_path_properties(schema):\\n    \\\"\\\"\\\"Parses properties from a schema and builds path parameters.\\\"\\\"\\\"\\n    parameters = []\\n    properties = schema.get(\\\"properties\\\", {})\\n\\n    for name, schema in properties.items():\\n        parameter = {\\n            \\\"name\\\": name,\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"required\\\": True,\\n            \\\"schema\\\": {\\\"type\\\": schema[\\\"type\\\"]},\\n        }\\n        parameters.append(parameter)\\n\\n    return parameters\\n\\n\\ndef default_module_loader(file_path):\\n    file_path = f\\\"{file_path}.main\\\"\\n    return importlib.import_module(file_path)\\n\\n\\ndef generate_docs(endpoints, name, loader=default_module_loader):\\n\\n    info = {\\n        \\\"title\\\": f\\\"{name.title()} Docs\\\",\\n        \\\"description\\\": \\\"\\\",\\n        \\\"version\\\": \\\"1.0.0\\\",\\n    }\\n\\n    paths = get_paths(endpoints)\\n    schema = get_schema(endpoints, loader)\\n\\n    parsed_schema = parse_schema(schema)\\n    parsed_path = parse_path(paths, parsed_schema)\\n\\n    spec = {\\n        \\\"openapi\\\": \\\"3.0.3\\\",\\n        \\\"info\\\": info,\\n        \\\"paths\\\": parsed_path,\\n        \\\"components\\\": {\\\"schemas\\\": parsed_schema},\\n    }\\n    return spec\\n\\n\\nif __name__ == \\\"__main__\\\":\\n\\n    with open(\\\"cdk.json\\\", \\\"r\\\") as json_file:\\n        context = json.load(json_file)[\\\"context\\\"]\\n        name = context[\\\"name\\\"]\\n        functions = context[\\\"functions\\\"]\\n\\n    endpoints = [endpoint for endpoint in functions if \\\"method\\\" in endpoint]\\n\\n    spec = generate_docs(endpoints, name)\\n    with open(r\\\"docs.yaml\\\", \\\"w\\\") as f:\\n        yaml.dump(spec, f, sort_keys=True)\\n' > generate_docs.py\",\n        \"python generate_docs.py\",\n        \"echo '#!/usr/bin/python\\n#\\n#  Copyright 2017 Otto Seiskari\\n#  Licensed under the Apache License, Version 2.0.\\n#  See http://www.apache.org/licenses/LICENSE-2.0 for the full text.\\n#\\n#  This file is based on\\n#  https://github.com/swagger-api/swagger-ui/blob/4f1772f6544699bc748299bd65f7ae2112777abc/dist/index.html\\n#  (Copyright 2017 SmartBear Software, Licensed under Apache 2.0)\\n#\\n\\\"\\\"\\\"\\nUsage:\\n    python swagger-yaml-to-html.py < /path/to/api.yaml > doc.html\\n\\\"\\\"\\\"\\nimport json\\nimport sys\\n\\nimport yaml\\n\\nTEMPLATE = \\\"\\\"\\\"\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>Swagger UI</title>\\n  <link href=\\\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\\\" rel=\\\"stylesheet\\\">\\n  <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui.css\\\" >\\n  <style>\\n    html\\n    {\\n      box-sizing: border-box;\\n      overflow: -moz-scrollbars-vertical;\\n      overflow-y: scroll;\\n    }\\n    *,\\n    *:before,\\n    *:after\\n    {\\n      box-sizing: inherit;\\n    }\\n    body {\\n      margin:0;\\n      background: #fafafa;\\n    }\\n  </style>\\n</head>\\n<body>\\n<div id=\\\"swagger-ui\\\"></div>\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui-bundle.js\\\"> </script>\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.24.2/swagger-ui-standalone-preset.js\\\"> </script>\\n<script>\\nwindow.onload = function() {\\n  var spec = %s;\\n  // Build a system\\n  const ui = SwaggerUIBundle({\\n    spec: spec,\\n    dom_id: \\\\\\\"#swagger-ui\\\\\\\",\\n    deepLinking: true,\\n    presets: [\\n      SwaggerUIBundle.presets.apis,\\n      SwaggerUIStandalonePreset\\n    ],\\n    plugins: [\\n      SwaggerUIBundle.plugins.DownloadUrl\\n    ],\\n    layout: \\\"StandaloneLayout\\\"\\n  })\\n  window.ui = ui\\n}\\n</script>\\n</body>\\n</html>\\n\\\"\\\"\\\"\\n\\nspec = yaml.load(sys.stdin, Loader=yaml.FullLoader)\\nsys.stdout.write(TEMPLATE % json.dumps(spec))\\n' > swagger_yml_to_ui.py\",\n        \"python swagger_yml_to_ui.py < docs.yaml > swagger.html\",\n        \"redoc-cli bundle -o redoc.html docs.yaml\",\n        \"aws s3 cp swagger.html s3://gui-docs/Lambda-Forge-Sandbox/staging-swagger.html\",\n        \"aws s3 cp redoc.html s3://gui-docs/Lambda-Forge-Sandbox/staging-redoc.html\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Modes": [
      "LOCAL_DOCKER_LAYER_CACHE",
      "LOCAL_CUSTOM_CACHE"
     ],
     "Type": "LOCAL"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Prod/Generate_Staging_Docs",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Pipeline/Prod/Generate_Staging_Docs/Generate Staging Docs/Resource"
   }
  },
  "PipelineCodeBuildActionRole226DB0CB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Condition": {
        "Bool": {
         "aws:ViaAWSService": "codepipeline.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/CodeBuildActionRole/Resource"
   }
  },
  "PipelineCodeBuildActionRoleDefaultPolicy1D62A6FE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "codebuild:BatchGetBuilds",
        "codebuild:StartBuild",
        "codebuild:StopBuild"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineAssetsFileAsset185A67CB4",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineAssetsFileAsset24D2D639B",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineAssetsFileAsset3FE71B523",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineAssetsFileAsset474303B7D",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineBuildSynthCdkBuildProject6BEFA8E6",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineProdGenerateStagingDocsGenerateStagingDocs06E08076",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineStagingCoverage7A6CE768",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineStagingIntegrationTestIntegrationTestFCF06875",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineStagingUnitTestUnitTest0835F1C1",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineStagingValidateDocsValidateDocsCA1FA06B",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineStagingValidateIntegrationTestsValidateIntegrationTests76400491",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PipelineUpdatePipelineSelfMutationDAA41400",
          "Arn"
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineCodeBuildActionRoleDefaultPolicy1D62A6FE",
    "Roles": [
     {
      "Ref": "PipelineCodeBuildActionRole226DB0CB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/CodeBuildActionRole/DefaultPolicy/Resource"
   }
  },
  "PipelineUpdatePipelineSelfMutationRole57E559E8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/UpdatePipeline/SelfMutation/Role/Resource"
   }
  },
  "PipelineUpdatePipelineSelfMutationRoleDefaultPolicyA225DA4E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineUpdatePipelineSelfMutationDAA41400"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "PipelineUpdatePipelineSelfMutationDAA41400"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "PipelineUpdatePipelineSelfMutationDAA41400"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Condition": {
        "ForAnyValue:StringEquals": {
         "iam:ResourceTag/aws-cdk:bootstrap-role": [
          "image-publishing",
          "file-publishing",
          "deploy"
         ]
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:*:iam::",
          {
           "Ref": "AWS::AccountId"
          },
          ":role/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "cloudformation:DescribeStacks",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineUpdatePipelineSelfMutationRoleDefaultPolicyA225DA4E",
    "Roles": [
     {
      "Ref": "PipelineUpdatePipelineSelfMutationRole57E559E8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/UpdatePipeline/SelfMutation/Role/DefaultPolicy/Resource"
   }
  },
  "PipelineUpdatePipelineSelfMutationDAA41400": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineUpdatePipelineSelfMutationRole57E559E8",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g aws-cdk@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk -a . deploy Prod-Lambda-Forge-Sandbox-Stack --require-approval=never --verbose\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/UpdatePipeline/SelfMutate",
    "EncryptionKey": "alias/aws/s3",
    "Name": "Prod-Lambda-Forge-Sandbox-Pipeline-selfupdate"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/UpdatePipeline/SelfMutation/Resource"
   }
  },
  "PipelineAssetsFileRole59943A77": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        },
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileRole/Resource"
   }
  },
  "PipelineAssetsFileRoleDefaultPolicy14DB8755": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":log-group:/aws/codebuild/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "codebuild:BatchGetBuilds",
        "codebuild:StartBuild",
        "codebuild:StopBuild"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-${AWS::AccountId}-${AWS::Region}"
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PipelineArtifactsBucketAEA9A052",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PipelineArtifactsBucketAEA9A052",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PipelineAssetsFileRoleDefaultPolicy14DB8755",
    "Roles": [
     {
      "Ref": "PipelineAssetsFileRole59943A77"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileRole/DefaultPolicy/Resource"
   }
  },
  "PipelineAssetsFileAsset185A67CB4": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineAssetsFileRole59943A77",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g cdk-assets@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk-assets --path \\\"assembly-Prod-Lambda-Forge-Sandbox-Stack-Staging/ProdLambdaForgeSandboxStackStagingLambdaForgeSandboxLambdaStack7E3F3588.assets.json\\\" --verbose publish \\\"f61d54af7601ba5344a26abbaa8b5ef2a414cd3a35c096d6c6ea252d3b6cf843:current_account-current_region\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset1",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset1/Resource"
   }
  },
  "PipelineAssetsFileAsset24D2D639B": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineAssetsFileRole59943A77",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g cdk-assets@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk-assets --path \\\"assembly-Prod-Lambda-Forge-Sandbox-Stack-Staging/ProdLambdaForgeSandboxStackStagingLambdaForgeSandboxLambdaStack7E3F3588.assets.json\\\" --verbose publish \\\"e21a8f2918819aa487bd83314dd3e9a202b137a029743e3f6d0b239d9d7be35a:current_account-current_region\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset2",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset2/Resource"
   }
  },
  "PipelineAssetsFileAsset3FE71B523": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineAssetsFileRole59943A77",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g cdk-assets@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk-assets --path \\\"assembly-Prod-Lambda-Forge-Sandbox-Stack-Staging/ProdLambdaForgeSandboxStackStagingLambdaForgeSandboxLambdaStack7E3F3588.assets.json\\\" --verbose publish \\\"4afaf6f0679420bf67a1026a2b2a724462632d7cb770d4adb75585e90b2a6022:current_account-current_region\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset3",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset3/Resource"
   }
  },
  "PipelineAssetsFileAsset474303B7D": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "CODEPIPELINE"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:5.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "PipelineAssetsFileRole59943A77",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"npm install -g cdk-assets@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk-assets --path \\\"assembly-Prod-Lambda-Forge-Sandbox-Stack-Staging/ProdLambdaForgeSandboxStackStagingLambdaForgeSandboxLambdaStack7E3F3588.assets.json\\\" --verbose publish \\\"d2f9c855e768fa14dac9a9bf2201427eb4d0700ff93b04af065fed0272eb2a95:current_account-current_region\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "CODEPIPELINE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Pipeline step Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset4",
    "EncryptionKey": "alias/aws/s3"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/Pipeline/Assets/FileAsset4/Resource"
   }
  },
  "UnitReportGroup2CFDB8FD": {
   "Type": "AWS::CodeBuild::ReportGroup",
   "Properties": {
    "ExportConfig": {
     "ExportConfigType": "NO_EXPORT"
    },
    "Type": "TEST"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/UnitReportGroup/Resource"
   }
  },
  "CoverageGroupF67CAF66": {
   "Type": "AWS::CodeBuild::ReportGroup",
   "Properties": {
    "ExportConfig": {
     "ExportConfigType": "NO_EXPORT"
    },
    "Type": "CODE_COVERAGE"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/CoverageGroup/Resource"
   }
  },
  "IntegrationReportGroup5D6F951E": {
   "Type": "AWS::CodeBuild::ReportGroup",
   "Properties": {
    "ExportConfig": {
     "ExportConfigType": "NO_EXPORT"
    },
    "Type": "TEST"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/IntegrationReportGroup/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/01OvQ6CMBB+FvdyKri4yuBKcHA00NZwUnukPzGm6buLVITp+819l0N+hP2medmMiz5T2EK4uIb3bMBBKtTSQklCVj/FxuYt8NGZcwj/rLzrNb/KtiPqI7MFhJPnvXRf+8cSVKSQvxc76ciweUKoSU2HJlyac+f7RetRieWFytBD8mlmprUcyLizIT9MtxYZ4xha8oanlRUvSQt0SDqy6u060tsC9js4bB4WMTNeO3xKqBN+AGqCxOxEAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "Prod-Lambda-Forge-Sandbox-Stack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}